# 스택"""자료를 보관할 수 있는 선형 구조단, 넣을 때 에는 한쪽 끝에서 밀어 넣어야 하고 (Push)꺼낼때는 같은 쪽에서 뽑아 꺼내야 하는 제약이 있다. (pop)- 후입 선출(LIFO : Last-In First-Out) 특징을 가지고 있음- 선형 자료구조스택의 동작1. 초기상태 : 비어 있는 스택 (empty stack)s = Stack()2. 데이터 원소 A를 스택에 추가s.push(A)s.push(B)BA이런식으로 쌓인다.3. 데이터 원소 꺼내기r1 = s.pop()위에 있는 원소부터 꺼내진다.※ 비어있는 스택에서 데이터 원소를 꺼내려 할때오류 : Stack underflow 라 부른다.※ 꽉 차 있는 스택에 새로운 원소를 넣으려 할때오류 : Stack overflow 라 부른다.스택의 추상적 자료구조 구현1. 배열을 이용하여 구현 - python 리스트와 메서드를 이용2. 연결 리스트를 이용하여 구현 - 양방향 연결 리스트를 이용연산의 정의 - size() - 현재 스택에 들어 있는 데이터 원소의 수를 구함 - isEmpty() - 현재 스택이 비어 있는지를 판단 - push(x) - 데이터 원소 x 를 스택에 추가 - pop() - 스택의 맨위에 저장된 데이터 원소를 제거 - peek() - 스택의 맨 위에 저장된 데이터 원소를 반환(제거 X)"""# Array를 이용한 스택class ArrayStack:    def __init__(self):        self.data = []    def size(self):        return len(self.data)    def isEmpty(self):        return self.size() == 0    def push(self, item):        self.data.append(item)    def pop(self):        return self.data.pop()    def peek(self):        return self.data[-1]def solution(expr):    match = {        ')': '(',        '}': '{',        ']': '[',    }    S = ArrayStack()    for c in expr:        if c in '({[':            S.push(c)        elif c in match:            if S.isEmpty():                return False            else:                t = S.pop()                if t != match[c]:                    return False    return S.isEmpty()if __name__ == "__main__":    s = ArrayStack()    s.push(1)    s.push(2)    s.push(3)    s.push(4)    print(s.size())    print(s.peek())    print(s.isEmpty())    print(s.data)    s.pop()    print(s.data)# 연습문제"""올바른 수식(A+B){(A+B)*C}[(A+B)*(C+D)]알고리즘 설계 - 수식을 왼쪽부터 한 글자씩 읽어서여는 괄호 - ( or { or [ -를 만나면 스택에 push닫는 괄호 - ) or } or ] -를 만나면 스택이 비어 있으면 올바르지 않은 수식 - 스택에서 pop 쌍을 이루는 여는 괄호인지 검사   - 맞지 않으면 올바르지 않은 수식 - 끝까지 검사한 후, 스택이 비어 있어야 올바른 수식"""