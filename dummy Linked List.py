class Node:    def __init__(self, item):        self.data = item        self.next = Noneclass LinkedList:    def __init__(self):        self.head = Node(None)        self.tail = None        self.head.next = self.tail        self.count = 0    def get(self, idx):        if idx < 0 or idx > self.count:            raise IndexError        i = 0        curr = self.head        while i < idx:            curr = curr.next            i += 1        return curr    def display(self):        res = []        curr = self.head        while curr.next:            curr = curr.next            res.append(curr.data)        return res    def add(self, pos, newnode):        if pos < 0 or pos > self.count + 1:            raise IndexError        if pos != 1 and pos == self.count + 1:            prev = self.tail        else:            prev = self.get(pos - 1)        return self.addAfter(prev, newnode)    def addAfter(self, prev, newnode):        newnode.next = prev.next        if prev.next is None:            self.tail = newnode        prev.next = newnode        self.count += 1        return True    def delete(self, pos):        if pos < 0 or pos > self.count:            raise IndexError        prev = self.get(pos - 1)        return self.deleteAfter(prev)    def deleteAfter(self, prev):        if prev.next == None:            return None        curr = prev.next        if curr.next == None:            prev.next = None            self.tail = prev        else:            prev.next = curr.next        self.count -= 1        return curr.dataif __name__ == "__main__":    L = LinkedList()    node1 = Node(11)    node2 = Node(22)    node3 = Node(33)    L.add(1, node1)    L.add(2, node2)    L.add(3, node3)    print(L.display())    print(L.delete(1))    print(L.display())